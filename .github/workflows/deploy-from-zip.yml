name: Deploy From ZIP (Smart)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-zip-smart
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure exactly one ZIP at repo root
        id: zip
        shell: bash
        run: |
          set -e
          shopt -s nullglob
          arr=( *.zip )
          if [ ${#arr[@]} -eq 0 ]; then
            echo "No ZIP at repo root"; exit 1
          fi
          if [ ${#arr[@]} -ne 1 ]; then
            printf '%s\n' "${arr[@]}"
            echo "Keep exactly one ZIP at repo root"; exit 1
          fi
          echo "ZIP=${arr[0]}" >> "$GITHUB_OUTPUT"

      - name: Unzip
        shell: bash
        run: |
          set -e
          mkdir extracted
          unzip -q "${{ steps.zip.outputs.ZIP }}" -d extracted

      - name: Detect project root (Flutter or static)
        id: detect
        shell: bash
        run: |
          set -e
          FLUTTER=$(find extracted -maxdepth 4 -type f -name pubspec.yaml | head -n1 || true)
          INDEX=$(find extracted -maxdepth 4 -type f -name index.html     | head -n1 || true)
          if [ -n "$FLUTTER" ]; then
            echo "mode=flutter" >> "$GITHUB_OUTPUT"
            echo "root=$(dirname "$FLUTTER")" >> "$GITHUB_OUTPUT"
          elif [ -n "$INDEX" ]; then
            echo "mode=static"  >> "$GITHUB_OUTPUT"
            echo "root=$(dirname "$INDEX")" >> "$GITHUB_OUTPUT"
          else
            echo "Neither pubspec.yaml nor index.html found in ZIP"; exit 1
          fi

      - name: Compute BASE href
        shell: bash
        run: |
          if [ "${{ github.event.repository.name }}" = "${{ github.repository_owner }}.github.io" ]; then
            echo "BASE=/" >> "$GITHUB_ENV"
          else
            echo "BASE=/${{ github.event.repository.name }}/" >> "$GITHUB_ENV"
          fi

      - name: Setup Flutter
        if: steps.detect.outputs.mode == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.3"

      - name: Build Flutter web
        if: steps.detect.outputs.mode == 'flutter'
        shell: bash
        working-directory: ${{ steps.detect.outputs.root }}
        run: |
          set -e
          flutter pub get
          # без --base-href (не нужен placeholder)
          flutter build web --release
          echo "OUT=${{ steps.detect.outputs.root }}/build/web" >> "$GITHUB_ENV"

      - name: Inject <base> into built index.html (flutter)
        if: steps.detect.outputs.mode == 'flutter'
        shell: bash
        run: |
          set -e
          INDEX="$OUT/index.html"
          if [ -f "$INDEX" ]; then
            if grep -q '<base ' "$INDEX"; then
              sed -i "s|<base[^>]*>|<base href=\"$BASE\">|" "$INDEX"
            else
              sed -i "1s|<head>|<head><base href=\"$BASE\">|" "$INDEX"
            fi
          fi

      - name: Prepare static dir (and fix base)
        if: steps.detect.outputs.mode == 'static'
        shell: bash
        working-directory: ${{ steps.detect.outputs.root }}
        run: |
          set -e
          if [ -f index.html ]; then
            if grep -q '<base ' index.html; then
              sed -i "s|<base[^>]*>|<base href=\"$BASE\">|" index.html
            else
              sed -i "1s|<head>|<head><base href=\"$BASE\">|" index.html
            fi
          fi
          echo "OUT=${{ steps.detect.outputs.root }}" >> "$GITHUB_ENV"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.OUT }}

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
